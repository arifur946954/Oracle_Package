create or replace NONEDITIONABLE PACKAGE StudentPackages AS
TYPE t_cursor is REF CURSOR;
   

    PROCEDURE SaveStudentData(
        p_Name IN VARCHAR2,
        p_Age IN NUMBER,
        p_Student2_Address1 IN VARCHAR2,
        p_Student2_Grade1 IN VARCHAR2,
         p_Student2_Address2 IN VARCHAR2,
        p_Student2_Grade2 IN VARCHAR2,
         p_Student2_Address3 IN VARCHAR2,
        p_Student2_Grade3 IN VARCHAR2
    );
     PROCEDURE UpdateStudentData(
        p_student1_id IN VARCHAR2,
        p_Name IN VARCHAR2,
        p_Age IN NUMBER,
        p_Student2_Address IN VARCHAR2,
        p_Student2_Grade IN VARCHAR2
    );
	
    PROCEDURE DELETE_STUDENT   ( P_SID	 IN VARCHAR2 ); 
	 
	PROCEDURE GetStudentAllData( p_cursor out t_cursor );
   
   PROCEDURE GetStudentDataByID(  p_cursor out t_cursor,  p_Student1_id IN VARCHAR2  );
      
  
END StudentPackages;
/
create or replace NONEDITIONABLE PACKAGE BODY StudentPackages AS
    PROCEDURE SaveStudentData(
        p_Name IN VARCHAR2,
        p_Age IN NUMBER,
        p_Student2_Address1 IN VARCHAR2,
        p_Student2_Grade1 IN VARCHAR2,
         p_Student2_Address2 IN VARCHAR2,
        p_Student2_Grade2 IN VARCHAR2,
         p_Student2_Address3 IN VARCHAR2,
        p_Student2_Grade3 IN VARCHAR2
    ) IS
        v_Student1_id NUMBER;
    BEGIN
        -- Insert data into STUDENT1 table
        INSERT INTO STUDENT1 (name, age)
        VALUES (p_Name, p_Age)
        RETURNING student1_id INTO v_Student1_id;

        -- Insert data into STUDENT2 table
        INSERT INTO STUDENT2 (student1_id, address, grade)
        VALUES (v_Student1_id, p_Student2_Address1, p_Student2_Grade1);
        
         INSERT INTO STUDENT2 (student1_id, address, grade)
        VALUES (v_Student1_id, p_Student2_Address2, p_Student2_Grade2);
        
         INSERT INTO STUDENT2 (student1_id, address, grade)
        VALUES (v_Student1_id, p_Student2_Address3, p_Student2_Grade3);

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END SaveStudentData;
    
    --Update Student Data
      PROCEDURE UpdateStudentData(
      p_student1_id IN VARCHAR2,
        p_Name IN VARCHAR2,
        p_Age IN NUMBER,
        p_Student2_Address IN VARCHAR2,
        p_Student2_Grade IN VARCHAR2
    ) IS
        v_Student1_id NUMBER;
    BEGIN
        -- Insert data into STUDENT1 table
        UPDATE STUDENT1
    SET name = p_Name,
        age = p_Age
    WHERE student1_id = p_Student1_id;

    -- Update data in STUDENT2 table
    UPDATE STUDENT2
    SET address = p_Student2_Address,
        grade = p_Student2_Grade
    WHERE student1_id = p_Student1_id;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END UpdateStudentData;
	
	--DELETE STUDENT1
		 PROCEDURE DELETE_STUDENT(
       P_SID IN VARCHAR2
    ) IS
    BEGIN
	  -- Delete the employee record
        DELETE FROM STUDENT2 WHERE STUDENT2_ID = P_SID;
	 -- Delete associated customer records
        DELETE FROM STUDENT1 WHERE STUDENT1_ID = P_SID;
       END DELETE_STUDENT;
	   
	   --GET All STUDENT 
	PROCEDURE GetStudentAllData(
    --p_SID IN NUMBER,
    p_cursor out t_cursor
    --p_STUDENT2_cursor OUT SYS_REFCURSOR
)
IS
BEGIN
 OPEN p_cursor FOR
        SELECT s1.student1_id, s1.name, s1.age, s2.student2_id, s2.address, s2.grade
        FROM STUDENT1 s1
        LEFT JOIN STUDENT2 s2 ON s1.student1_id = s2.student1_id;
   
END GetStudentAllData;


 PROCEDURE GetStudentDataByID(p_cursor out t_cursor,  p_Student1_id IN VARCHAR2  )
      
      
    IS
    BEGIN
        OPEN p_cursor FOR
       SELECT s1.student1_id, s1.name, s1.age, s2.student2_id, s2.address, s2.grade
        FROM STUDENT1 s1
        LEFT JOIN STUDENT2 s2 ON s1.student1_id = s2.student1_id
        WHERE s1.student1_id = p_Student1_id;
    END GetStudentDataByID;
	
	
	
END StudentPackages;
/
